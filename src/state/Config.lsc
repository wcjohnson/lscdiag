// Compilation configuration state
import { ReduxComponent, action, selector } from 'redux-components'
{ assign } = Object

// ES6 imports are not yet supported in Runkit, so gotta use 'useRequire'
initialState = {
  compiler: 'latest',
  plugins: ['transform-flow-strip-types']
  features: ['useRequire']
}

export default class Config extends ReduxComponent:
  static verbs = ['SET_COMPILER', 'SET_FEATURES', 'SET_PLUGINS', 'SET_OPTIONS']

  reducer(state = initialState, action) ->
    match action.type:
      | this.SET_COMPILER: ({}~assign(state, { compiler: action.payload }))
      | this.SET_FEATURES: ({}~assign(state, { features: action.payload }))
      | this.SET_PLUGINS: ({}~assign(state, { plugins: action.payload }))
      | this.SET_OPTIONS: ({}~assign(state, { options: action.payload }))
      | else: state

  @action({isDispatcher: true})
  setCompiler(value) ->
    ({ type: this.SET_COMPILER, payload: value })

  @action({isDispatcher: true})
  setPlugins(value) ->
    ({ type: this.SET_PLUGINS, payload: value })

  @action({isDispatcher: true})
  setFeatures(value) ->
    ({ type: this.SET_FEATURES, payload: value })

  @action({isDispatcher: true})
  setOptions(value) ->
    ({ type: this.SET_OPTIONS, payload: value })

  @selector({isObservable: true})
  get(state) -> state
