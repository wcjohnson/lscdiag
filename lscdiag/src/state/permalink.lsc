import base64url from 'base64-url'
// import msgpack5 from 'msgpack5'
import pako from 'pako'
import url from 'url'
import { replaceAppState } from './reset'

// msgpack = msgpack5()

export createPermalink(state, origUrl) ->
  packed = JSON.stringify(state)
  // packed = msgpack.encode(state)
  console.log("permalinking to state", packed, " uncompressed length (bytes) ", packed.length)
  deflated = pako.deflate(packed, { to: 'string', level: 9 })
  stateArg = base64url.encode(deflated)

  parsed = url.parse(origUrl)
  delete parsed.search
  parsed.query = {
    v: 2
    s: stateArg
  }

  newUrl = url.format(parsed)

  newUrl

resolveVersion = {
  '1': (compressed) ->
    let resolved, deflated, stringified
    try:
      now deflated = base64url.decode(compressed)
      now stringified = pako.inflate(deflated, { to: 'string'})
      now resolved = JSON.parse(stringified)

    resolved

  '2': (compressed) ->
    let resolved, deflated, stringified
    try:
      now deflated = base64url.decode(compressed)
      now stringified = pako.inflate(deflated, { to: 'string'})
      now resolved = JSON.parse(stringified)

    resolved
}

reallyResolvePermalink(history, version, state) ->
  // First discard the query string
  history.replace("/")

  resolver = if version: resolveVersion[version]
  if not resolver:
    console.debug("invalid permalink version")
    return

  resolved = resolver(state)
  if not resolved:
    console.debug("garbled permalink data")
    return

  replaceAppState(resolved)

export resolvePermalink(history, version, state) ->
  setTimeout(-> reallyResolvePermalink(history, version, state), 0)
