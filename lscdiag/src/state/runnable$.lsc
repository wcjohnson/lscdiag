import { toolchain$ } from './toolchain$'
import { map, combineLatest, toBehaviorSubject, createConstant, filter } from '@ormojo/fobs'

babelConfig = createConstant({
  source: {
    type: 'toolchain'
  },
  options: {
    children: [
      {
        source: {
          type: 'remote',
          url: 'https://wcjohnson.github.io/lightscript-compiler/modules/platform/babel-7.min.js'
        }
      },
      {
        source: {
          type: 'remote'
          url: 'https://wcjohnson.github.io/lightscript-compiler/modules/preset/4.0.0-alpha.20.min.js'
        }
        options: {
          options: JSON.stringify({
            "_noLscTransform": true
            env: { targets: { node: 8} }
          })
        }
      }
    ]
  }
})

// Take compiled fixture output as AST, run it through preset-env
export default toolchainRunnable$(fixture) ->
  combineLatest([
    babelConfig
    fixture.output$
  ])
  ~filter(x ->
    maybeError = x[1]?.error
    maybeError~looseEq(null)
  )
  ~toolchain$()
  ~map! ({result}) ->
    if result.error:
      fixture.errors$.next([{error: result.error}])
    else:
      fixture.errors$.next(null)

    result
  ~toBehaviorSubject()
