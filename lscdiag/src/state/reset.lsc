import tree from '.'

reallyReplaceAppState(state) ->
  // Discard existing fixtures
  tree.fixtures.splice(0, tree.fixtures.length)
  // Reload new state
  tree.store.dispatch({type: 'RESET_APP_STATE', payload: state})

// Replace the entire app state
export replaceAppState(state) ->
  // Defer until out of React rendering cycles
  setTimeout(-> reallyReplaceAppState(state), 0)

// A clean slate app state
cleanSlate = {
  fixtures: {
    _map: {
      '@@metadata': {
        cj3v2yrkf00003k657l7ap3vt: true
      }
      cj3v2yrkf00003k657l7ap3vt: {
        source: {
          lsc: ''
        }
        ui: {
          tabs: [
            0
            0
          ]
          selectedNode: null
        }
        config: {
          compiler: 'latest'
        }
      }
    }
    list: [
      'cj3v2yrkf00003k657l7ap3vt'
    ]
  }
}

export resetAppState() ->
  replaceAppState(cleanSlate)
