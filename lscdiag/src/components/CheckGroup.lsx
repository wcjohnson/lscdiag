import React from 'react'

import compose from 'recompose/compose'
import withPropsOnChange from 'recompose/withPropsOnChange'

add(arr, v) ->
  if arr~looseEq(null): now arr = []
  if v~looseNotEq(null) and arr.indexOf(v) == -1: arr.concat([v]) else: arr

remove(arr, v) ->
  if arr~looseEq(null): now arr = []
  let idx
  if (now idx = arr.indexOf(v)) > -1:
    next = arr.slice(); next.splice(idx, 1); next
  else:
    arr

has(arr, v) -> if arr~looseNotEq(null) and arr.indexOf(v) > -1: true else: false

CheckGroup = compose(
  withPropsOnChange(['children', 'onChange', 'value'], (props) ->
    parentOnChange = props.onChange or (-> return)
    parentValue = props.value or []

    childHandlers = React.Children.map(props.children, (child) ->
      value = child.props.value
      (e) ->
        if e.target.checked:
          parentOnChange(parentValue~add(value))
        else:
          parentOnChange(parentValue~remove(value))
    )

    { childHandlers }
  )
)(CheckGroup(props) ->
  // Deliberately consuming the onChange prop
  // eslint-disable-next-line no-unused-vars
  { children, childHandlers, value, onChange, parentContainer = "div", ...otherProps } = props

  let i = -1
  clonedChildren = React.Children.map(children, (child) ->
    i++
    React.cloneElement(child, {
      checked: value~has(child.props.value)
      onChange: childHandlers[i]
    })
  )

  React.createElement(parentContainer, otherProps, clonedChildren)
)

export default CheckGroup
